* Day 1
** Talks
*** Road-map from Nomadic Labs
- Speaker :: Benjamin Canou
**** Protocol updates
- next
  + Sapling integration
    * ZKIP's yay
  + Refine gas model
  + refine account structure
  + add more op codes to Michelson
**** Shell updates
- Improved storage is being worked on
**** Interoperability
- _Soon_
  + Generation of data codecs for C
  + compilation to JavaScript
- _Ongoing_
  + Split in processes (validation, networks, RPCs)
**** Formal Methods
- Ongoing formal verification for smart contracts
  + Coq code I've read
- _Ongoing_
  + Verifcation of reference smart contracts
  + Albert an IR on-top of Michelson with variables
  + Integration of more formally verified primitives
*** Road-map 2020 from Cryptium Labs
- Speaker :: Adrian
**** Proof of Steak (steak zones!)
- Programmable Staking
  + increasing the security and flexibility of bakers
  + Enabling rotation of consensus keys
**** Governance
- Allowing individual to override their baker's vote
- Amending the voting process to allow hotfixes
**** ZKPs
- zk-snarks opcodes to Michelson
- Multi asset shielded pools (yay)
- yay plonk
**** Consensus
- Fast finality
  + BFT of some sort
- VDF's or PVSS
  + Currently using randal
- Validation pipeline
**** Scalability
- adding BLS to reduce block sizes
- Improving the gas model to allow more complex smart contracts
*** Checker
- Speaker :: Arthur Breitman
**** What is Chcecker
- Software for stablizing a token w.r.t. an externally provided index
  + Defined as a tezos smart-contract
  + Index can be a peg
**** Goals
- Minimize trust ina  system
  + Have minimialistic governance
  + Minimize resliance on eternal actors
  + No central collateral
- Design Limits
  + Peg can break
  + Parameter tuning is still worth having
  + Oracle feeds are a weak point
**** Model design
- Modular design
  + Reasoning can happen over a module
- Relies on three different tokens
  + Draught token
  + Checker token
  + Kits
    * basically a stble coin
**** Locking Tezos
- Locking tez is *Draught* user selects
  1. Locking time
  2. unlocking amount
     - Spend 100 kit to unlock
  3. forfeit threshold
- Draguht contracts offer some amount of kits to the user based on the
  above variables and an internal model
  + Tez is locked, but user still controls delegation
  + Draught contact sends kits
**** Draugth
- To lock interact with *Draught* contract
  + Draught model determiend by tunable parameteres
  + Draught itself is tokenized in draguht tokens.
  + Draught targets fixed kit holding
    * Cannot create or destroy kit
    * Maintain enough kit to interact with users
  + If user forfeits tez, tez held by Draught is auctioned off for kit
**** Checker
- is also tokenized contract
- _Has two purposes_
  1. Governance
     - Used to vote on Draught parameters
     - Used to select an oracle feed
  2. Stabilization
     - If kit above peg, *mint kit*, auction off for checker tokens, burn
     - If kit is below peg, *mint checker tokens* auction off kit,
       burn
**** Checker and draught
- With these two it might work, however it
**** Auctions
- Exchange between tokens happen through an auction
  + Why?
    * Simple to analyze
    * descending auction is gas sparing
    * Typical horizon on the order of days
    * Alternatives (Dexter) assumes liquidity
      - Downside :: Slow
**** Oracle feed
- contract needs tow oracle feeds
  + Tez with respect to peg
  + kit with respect to tez
**** What about MakerDAO
- similar but with a few differences
  + Differetation with Druaght and Checker
    * Dai has survived very wild preiods relatively unscathed
**** Failure scenarios
- Here are a few ways this can break down
  + Malicious *mispricing* from oracle feed
  + Forefeitures *spirals*
  + Demands for kit can outstrip interest for locking tez *This is
    weird/ important one*
  + Checker governance picking loose Draught parameters
*** Tezos Flavored Truffle
- Talk :: Nick Andria
**** The Truffle suite of tools
- Mission
  + Get developers from idea to dapp as comfortable as possible
- Comprises a range of different tools
**** Truffle
- Written in Node.js
- Cli tool that *dramatically* reduces complexity of building DApps
* Day 2
** Talks
** Panels
*** Privacy panel
- 
